<!--main page, /pins/index or '/pins'-->

<h1>Find Outdoor Recreation Sites Near You!</h1>
<p>double click on map to add pin!</p>  

<!--includ google map javascript api libraries -->
<script src="//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js" type="text/javascript"></script>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?libraries=places&sensor=false"></script>
<div>
  <!-- div that map gets placed in -->
  <div id="map" style='width:100%; height: 600px;'></div>
</div>

<script type="text/javascript">
  //array for storing marker objects in the javascript format
  var markerObjs = [];
  //storing current user id to attach to pins created
  var userId = <%= @id %>;
  //storing current user's visited pins for filtering
  var visitedPins = "<%= @pinsVisited %>";
  //gmaps4rails, builds the map, options are placed in provider
  handler = Gmaps.build('Google');
  handler.buildMap(
        { 
          provider: {
            mapTypeId:google.maps.MapTypeId.SATELLITE, 
            center:new google.maps.LatLng(39, -95), 
            zoom: 4
          }, 
          internal: {id: 'map'}
        }, 
    //adds listener for double click on map, calls placeMarker and passes lat &lng as params
      function(){
       google.maps.event.addListener(handler.getMap(), "dblclick", function(event){
          placeMarker(event.latLng);
        });
        
        
        
        //SEARCH CAPABILITY
   var input = (
   document.getElementById('pac-input'));
   map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

   var searchBox = new google.maps.places.SearchBox(
    /** @type {HTMLInputElement} */(input));

  // Listen for the event fired when the user selects an item from the
  // pick list. Retrieve the matching places for that item.
  google.maps.event.addListener(searchBox, 'places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }
   

    // For each place, get the icon, place name, and location.
   
    var bounds = new google.maps.LatLngBounds();
    for (var i = 0, place; place = places[i]; i++) {
      var image = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };
     
      bounds.extend(place.geometry.location);
    }
  //zoom in on the spot that got searched
    map.fitBounds(bounds);
  });
        
        
        
        
    //function called from double click event, latLng comes from the location of the event on map
        function placeMarker(latLng) {
          //create new javascript google maps marker object
        var marker = new google.maps.Marker({
          position: latLng, 
          map: handler.getMap(),
          animation: google.maps.Animation.DROP,
        });
        //add marker to markers array from database and front end google maps marker objects array
        markers.push(marker);
        markerObjs.push(marker);

          //create new infowindow to be opened when pin is dropped
          var infoWindow = new google.maps.InfoWindow();
          //check for null activity type
          var a_type;
          if(this.activity_type){
           a_type = this.activity_type;
          }
          else{
           a_type = "click add more details to set activity type"
          }
          //html content of infowindow
          var html = '<br>Located in: ' + latLng + '<br><button type = "button" id="createPin" class="btn btn-primary">save pin</button>';
          infoWindow.setContent(html);
          infoWindow.open(handler.getMap(), marker);
         
          //listener for when the infowindow is closed
          google.maps.event.addListener(infoWindow,'closeclick',function(){
             marker.setMap(null); //removes the marker
             // then, remove the infowindows name from the array
           });
          //listener for if the user clicks outside of the infowindow, any where on the map
           google.maps.event.addListener(handler.getMap(), "click", function(){
             marker.setMap(null); //removes the marker
             // then, remove the infowindows name from the array
           });
          //set the user id of the infowindow to be the same as the user id of the marker
          infoWindow.set("user_id", this.user_id);
         
          //adds listener to the infowindow once the dom is ready
          google.maps.event.addListener(infoWindow, 'domready', function() {
           
            //ajax function for when "save pin" button gets clicked, post the marker object
            // and corresponding data to sqlite database, params are lat, long, and user_id,
            //return to pins index page after pin is saved
          $("#createPin").click(function(){
            $.ajax({
              type: 'post',
              data: { pin : {latitude: latLng.lat(),
                     longitude: latLng.lng(),
                           user_id: userId}},
               success: function() {
                 alert('thanks for adding this pin! please click on the pin to add a site name, activity type, and comments!');
              window.location = '/pins'
            }
            });
           
          });
            
          });//domready
         };//place marker func
    }); //close initialize func that builds map
  
    
                              

    //add markers saved in database to this array in json form
     markers = <%= raw @hash.to_json %>
       var infowindow = new google.maps.InfoWindow({ maxWidth: 600}); 
       var marker, i;
       var map = handler.getMap();
       showMarkers(map);

 

  //called in show markers function, loops through array "markers" from database and makes markers visible on the map
  function setAllMap(map){
      
    for( i = 0; i < markers.length; i++ ) {
      //get info from each column of pin in database to add to google marker object
        var position = markers[i];
        var id = markers[i].id;
      var address = markers[i].address;
        var activity_type = markers[i].activity_type;
      var user_id = markers[i].user_id;
      var lastComment;
      if(markers[i].comments[0]) {
       lastComment = markers[i].comments[0].content;
      }
      else{
        lastComment = "no comments yet";
      }
      //creates marker object
        marker = new google.maps.Marker({
            position: position,
            map: handler.getMap(),
          
          
         });
      //set atributes of marker from variables holding their database values
       marker.set("id",id);
      marker.set("activity_type", activity_type);
      marker.set("address", address);
      marker.set("user_id", user_id);
      marker.set("last_comment", lastComment);
      markerObjs.push(marker);
      
        
    //listener for when a marker gets clicked on
        google.maps.event.addListener(marker, 'click', (function() {
           var a_type;
          if(this.activity_type){
           a_type = this.activity_type;
          }
          else{
           a_type = "no activity type yet";
          }
          
          //content of infowindow that opens when a marker gets clicked on
         var html =  '<b>Most Recent Comment: </b>' + this.last_comment + '<br><b>Activity Type: </b>' + a_type + '<br><b>Located in: </b>' + this.address + '</br><input type="checkbox" id="visitedCheckbox">&nbsp&nbspI have visited this site!<br><div class="btn-group" role="group"><button type = "button" id = "addComments" class="btn btn-primary">add/view comments</button><button type = "button" class="btn btn-primary" id="addDetails">edit site details</button><button type="button" class="btn btn-primary" id = "deletePin">remove this pin</button></div>'; 
          infowindow.setContent(html);
          infowindow.set("id", this.id);
          infowindow.set("user_id", this.user_id);
          
         //add listener for when the infowindow is dom ready, listens for which buttons clicked
          google.maps.event.addListener(infowindow, 'domready', function() {
            var id = infowindow.id;
            
            //ajax call for when user selects "add/view comments" button, takes them to the page
            //which lists all comments associated with that pin using get request
          $("#addComments").click(function(){
            $.ajax({
              url: "/pins/",
              type: 'get',
              data: {id: infowindow.id},
              success: function() {
                  window.location = "/pins/" + infowindow.id + "?method=get"
                }
            });
          });
            
            //ajax call for when user selects "remove pin" button, makes sure they're the user who created the pin, calls delete request and passes the infowindow id, which was set = to the pin id
          $("#deletePin").click(function(){ 
            if (userId === infowindow.user_id ) {
            $.ajax({
              url: "/pins/"+ infowindow.id,
              type: 'delete', 
              data: {id: infowindow.id},
            });
              event.preventDefault();
           //removes marker from map
             findMarker(id).setMap(null);
            }
            else {
              alert("You didn't create this pin, so you cannot delete it. Please add comments!");
            }
          });
            
            //ajax call for if the user selects "edit details" button, takes them to the edit pin page using the infowindow.id (same as marker.id), get request for edit, checks to make sure they're the user that created the pin
            $("#addDetails").click(function(){
              if(userId === infowindow.user_id) {
              $.ajax({
                url: "/pins/"+infowindow.id+"/edit",
                type: 'get',
                data: {id: infowindow.id},
                success: function() {
                  window.location = "/pins/" + infowindow.id + "/edit" 
                }
              })
              }
              else {
                alert("You didn't create this pin, so you can't add more details. Please add comments!");
              }
            });
            //ajax call for when user clicks "I have visited this site" checkbox, adds the pin id to the visited pins attribute using updatedPinsVisited action in user controller. 
            $("#visitedCheckbox").click(function(){
               visitedPins = visitedPins + ',' + infowindow.id;
              $.ajax({
                url: '/users/' + userId + '/updatePinsVisited/' + infowindow.id,
                type: 'put', 
                data: {pinId : infowindow.id},
              })
            });
         });//domready
          
          //function used to find marker given an id in the marker objects array
          function findMarker(id){
          var theOne;
            for(i=0; i<markerObjs.length; i++){
              if (markerObjs[i].id == id){
                theOne = markerObjs[i];
              }
            }
            return theOne;
          }
          
          infowindow.open(handler.getMap(), this);
         }));

          }
  }
 
  
 
 


                    
  

// Shows any markers currently in the array.
function showMarkers() {
  setAllMap(map);
}

  //function for filtering displayed pins based off what the user selects from the dropdown
  function filterPins() {
     var x = document.getElementById("activity_dropdown").value.toUpperCase();
    if(x === "SHOWALL") {
      setAllMap(map);
    }
    
    else if (x === "HIDEALL") {
       for( i = 0; i < markerObjs.length; i++ ) {
          markerObjs[i].setMap(null);
       }
    }
    else if (x === "MYMARKERS") {
       for (i = 0; i< markerObjs.length; i++) {
          if( markerObjs[i].user_id === userId){
            markerObjs[i].setMap(map);
          }
         else {
             markerObjs[i].setMap(null);
           }
       }
    }
    
    //check visitedPins attribute of that  user to see if that pin's id is present, otherwise don't display it
    else if (x === "PINSVISITED") {
      for(i = 0; i< markerObjs.length; i++) {
        var n = visitedPins;
        var m = n.indexOf(markerObjs[i].id);
        if(m>-1){
          markerObjs[i].setMap(map);
        }
        else {
          markerObjs[i].setMap(null);
        }
      }
    }
    
    else {
        for( i = 0; i < markerObjs.length; i++ ) {
          var act = markerObjs[i].activity_type;
           if (act && x === act.toUpperCase()){
              markerObjs[i].setMap(map);
           }
           else {
             markerObjs[i].setMap(null);
           }
          }
    }
   }                     


       
       
  </script>   
                     
     
                     
                     
    
  <body>
    <div id="panel">
      <span>
        Select an activity type to filter pins on map: 
        <!--dropdown displayed underneath map for filtering pins-->
      <select id = "activity_dropdown" onchange = "filterPins();">
        <option value = "showAll">show all pins</option>
        <option value = "hideAll">hide all pins</option>
        <option value = "myMarkers">pins I've dropped</option>
        <option value = "pinsVisited">pins I've visited</option>
        <option value="climbing">climbing</option>
        <option value = "running">running</option>
        <option value = "hiking">hiking</option>
        <option value = "camping">camping</option>
        <option value = "biking">biking</option>
      </select>
      </span>
    </div>
    






  <body>
    <!-- searchbox -->
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    
  </body>

